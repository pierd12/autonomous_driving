#!/usr/bin/env python
import time
import rospy
from std_msgs.msg import Float64
from sensor_msgs.msg import LaserScan
class DetectObstacle(object):
    def __init__(self):
        self.passing = False
        self.finishing = False
        self.front_obstacle = False
        self.detected = rospy.Publisher('obstacle', Float64, queue_size=1)
        self.turn = rospy.Publisher('move', Float64, queue_size = 1)
        self.vel = rospy.Publisher('max_vel', Float64, queue_size = 1)
        
        self.right_obstacle = False
        rospy.Subscriber('scan', LaserScan, self.scan_front)
        rospy.Subscriber('pass', Float64, self.pass_obj)
    def scan_front(self,msg):
        front = msg.ranges[0:2] #scan front object
        front_left = msg.ranges[330:359]
        min_fr = self.getmin(front)
        min_fl = self.getmin(front_left)
        min_f = min(min_fr,min_fl)
        rightlf = msg.ranges[240:359] # to pass the object
        min_rlf = self.getmin(rightlf)
        
        if min_fr < 0.5 and self.front_obstacle == False and not self.passing:
            # there is an obstacle ahead
            self.front_obstacle = True
            self.detected.publish(min_fr)
        elif self.passing:
            if min_rlf < 0.5:
                self.detected.publish(1.)
            elif not self.finishing:
                self.passing = False
                self.finishing = True
                self.detected.publish(2.)
                
                
    def pass_obj(self,msg):
        if(msg.data == 2.):
            self.passing = False
            self.front_obstacle = False
            self.finishing = False
        if(msg.data == 1.):
            self.passing = True
            


    def getmin(self,arr):
        m ,i  = min((arr [i],i) for i  in xrange(len(arr)))
        return m

    def main(self):
        rospy.spin()
if __name__ == '__main__':
    rospy.init_node('detect_obstacle')
    node = DetectObstacle()
    node.main()